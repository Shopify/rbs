module RBS
  module Unnamed
    module Random_Formatter
      # <!--
      #   rdoc-file=lib/random/formatter.rb
      #   - base64(n=nil)
      # -->
      # Generate a random base64 string.
      #
      # The argument *n* specifies the length, in bytes, of the random number to be
      # generated. The length of the result string is about 4/3 of *n*.
      #
      # If *n* is not specified or is nil, 16 is assumed. It may be larger in the
      # future.
      #
      # The result may contain A-Z, a-z, 0-9, "+", "/" and "=".
      #
      #     require 'random/formatter'
      #
      #     Random.base64 #=> "/2BuBuLf3+WfSKyQbRcc/A=="
      #     # or
      #     prng = Random.new
      #     prng.base64 #=> "6BbW0pxO0YENxn38HMUbcQ=="
      #
      # See RFC 3548 for the definition of base64.
      #
      %a{annotate:rdoc:copy:Random::Formatter#base64}
      def base64: (?Integer? n) -> String

      # <!--
      #   rdoc-file=lib/random/formatter.rb
      #   - hex(n=nil)
      # -->
      # Generate a random hexadecimal string.
      #
      # The argument *n* specifies the length, in bytes, of the random number to be
      # generated. The length of the resulting hexadecimal string is twice of *n*.
      #
      # If *n* is not specified or is nil, 16 is assumed. It may be larger in the
      # future.
      #
      # The result may contain 0-9 and a-f.
      #
      #     require 'random/formatter'
      #
      #     Random.hex #=> "eb693ec8252cd630102fd0d0fb7c3485"
      #     # or
      #     prng = Random.new
      #     prng.hex #=> "91dc3bfb4de5b11d029d376634589b61"
      #
      %a{annotate:rdoc:copy:Random::Formatter#hex}
      def hex: (?Integer? n) -> String

      # <!--
      #   rdoc-file=lib/random/formatter.rb
      #   - random_bytes(n=nil)
      # -->
      # Generate a random binary string.
      #
      # The argument *n* specifies the length of the result string.
      #
      # If *n* is not specified or is nil, 16 is assumed. It may be larger in future.
      #
      # The result may contain any byte: "x00" - "xff".
      #
      #     require 'random/formatter'
      #
      #     Random.random_bytes #=> "\xD8\\\xE0\xF4\r\xB2\xFC*WM\xFF\x83\x18\xF45\xB6"
      #     # or
      #     prng = Random.new
      #     prng.random_bytes #=> "m\xDC\xFC/\a\x00Uf\xB2\xB2P\xBD\xFF6S\x97"
      #
      %a{annotate:rdoc:copy:Random::Formatter#random_bytes}
      def random_bytes: (?Integer? n) -> String

      # <!--
      #   rdoc-file=lib/random/formatter.rb
      #   - urlsafe_base64(n=nil, padding=false)
      # -->
      # Generate a random URL-safe base64 string.
      #
      # The argument *n* specifies the length, in bytes, of the random number to be
      # generated. The length of the result string is about 4/3 of *n*.
      #
      # If *n* is not specified or is nil, 16 is assumed. It may be larger in the
      # future.
      #
      # The boolean argument *padding* specifies the padding. If it is false or nil,
      # padding is not generated. Otherwise padding is generated. By default, padding
      # is not generated because "=" may be used as a URL delimiter.
      #
      # The result may contain A-Z, a-z, 0-9, "-" and "_". "=" is also used if
      # *padding* is true.
      #
      #     require 'random/formatter'
      #
      #     Random.urlsafe_base64 #=> "b4GOKm4pOYU_-BOXcrUGDg"
      #     # or
      #     prng = Random.new
      #     prng.urlsafe_base64 #=> "UZLdOkzop70Ddx-IJR0ABg"
      #
      #     prng.urlsafe_base64(nil, true) #=> "i0XQ-7gglIsHGV2_BNPrdQ=="
      #     prng.urlsafe_base64(nil, true) #=> "-M8rLhr7JEpJlqFGUMmOxg=="
      #
      # See RFC 3548 for the definition of URL-safe base64.
      #
      def urlsafe_base64: (?Integer? n, ?boolish padding) -> String

      # <!--
      #   rdoc-file=lib/random/formatter.rb
      #   - uuid()
      # -->
      # Generate a random v4 UUID (Universally Unique IDentifier).
      #
      #     require 'random/formatter'
      #
      #     Random.uuid #=> "2d931510-d99f-494a-8c67-87feb05e1594"
      #     Random.uuid #=> "bad85eb9-0713-4da7-8d36-07a8e4b00eab"
      #     # or
      #     prng = Random.new
      #     prng.uuid #=> "62936e70-1815-439b-bf89-8492855a7e6b"
      #
      # The version 4 UUID is purely random (except the version). It doesn't contain
      # meaningful information such as MAC addresses, timestamps, etc.
      #
      # The result contains 122 random bits (15.25 random bytes).
      #
      # See [RFC9562](https://www.rfc-editor.org/rfc/rfc9562) for details of UUIDv4.
      #
      def uuid: () -> String

      # <!--
      #   rdoc-file=lib/random/formatter.rb
      #   - alphanumeric(n = nil, chars: ALPHANUMERIC)
      # -->
      # Generate a random alphanumeric string.
      #
      # The argument *n* specifies the length, in characters, of the alphanumeric
      # string to be generated. The argument *chars* specifies the character list
      # which the result is consist of.
      #
      # If *n* is not specified or is nil, 16 is assumed. It may be larger in the
      # future.
      #
      # The result may contain A-Z, a-z and 0-9, unless *chars* is specified.
      #
      #     require 'random/formatter'
      #
      #     Random.alphanumeric     #=> "2BuBuLf3WfSKyQbR"
      #     # or
      #     prng = Random.new
      #     prng.alphanumeric(10) #=> "i6K93NdqiH"
      #
      #     Random.alphanumeric(4, chars: [*"0".."9"]) #=> "2952"
      #     # or
      #     prng = Random.new
      #     prng.alphanumeric(10, chars: [*"!".."/"]) #=> ",.,++%/''."
      #
      def alphanumeric: (?Numeric?, ?chars: Array[String]) -> String
    end
  end
end
