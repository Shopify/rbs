/*----------------------------------------------------------------------------*/
/* This file is generated by the templates/template.rb script and should not  */
/* be modified manually.                                                      */
/* To change the template see                                                 */
/* templates/include/rbs/ast.h.erb                                            */
/*----------------------------------------------------------------------------*/

#ifndef RBS__AST_H
#define RBS__AST_H

#include "ruby.h"

/*
 * This enum is used to identify the type of a node in the AST.
 */
enum rbs_node_type {
    RBS_AST_ANNOTATION = 1,
    RBS_AST_COMMENT = 2,
    RBS_AST_DECLARATIONS_CLASS = 3,
    RBS_AST_DECLARATIONS_CLASS_SUPER = 4,
    RBS_AST_DECLARATIONS_CLASS_ALIAS = 5,
    RBS_AST_DECLARATIONS_CONSTANT = 6,
    RBS_AST_DECLARATIONS_GLOBAL = 7,
    RBS_AST_DECLARATIONS_INTERFACE = 8,
    RBS_AST_DECLARATIONS_MODULE = 9,
    RBS_AST_DECLARATIONS_MODULE_SELF = 10,
    RBS_AST_DECLARATIONS_MODULE_ALIAS = 11,
    RBS_AST_DECLARATIONS_TYPE_ALIAS = 12,
    RBS_AST_DIRECTIVES_USE = 13,
    RBS_AST_DIRECTIVES_USE_SINGLE_CLAUSE = 14,
    RBS_AST_DIRECTIVES_USE_WILDCARD_CLAUSE = 15,
    RBS_AST_MEMBERS_ALIAS = 16,
    RBS_AST_MEMBERS_ATTR_ACCESSOR = 17,
    RBS_AST_MEMBERS_ATTR_READER = 18,
    RBS_AST_MEMBERS_ATTR_WRITER = 19,
    RBS_AST_MEMBERS_CLASS_INSTANCE_VARIABLE = 20,
    RBS_AST_MEMBERS_CLASS_VARIABLE = 21,
    RBS_AST_MEMBERS_EXTEND = 22,
    RBS_AST_MEMBERS_INCLUDE = 23,
    RBS_AST_MEMBERS_INSTANCE_VARIABLE = 24,
    RBS_AST_MEMBERS_METHOD_DEFINITION = 25,
    RBS_AST_MEMBERS_METHOD_DEFINITION_OVERLOAD = 26,
    RBS_AST_MEMBERS_PREPEND = 27,
    RBS_AST_MEMBERS_PRIVATE = 28,
    RBS_AST_MEMBERS_PUBLIC = 29,
    RBS_AST_TYPE_PARAM = 30,
    RBS_METHOD_TYPE = 31,
    RBS_NAMESPACE = 32,
    RBS_TYPE_NAME = 33,
    RBS_TYPES_ALIAS = 34,
    RBS_TYPES_BASES_ANY = 35,
    RBS_TYPES_BASES_BOOL = 36,
    RBS_TYPES_BASES_BOTTOM = 37,
    RBS_TYPES_BASES_CLASS = 38,
    RBS_TYPES_BASES_INSTANCE = 39,
    RBS_TYPES_BASES_NIL = 40,
    RBS_TYPES_BASES_SELF = 41,
    RBS_TYPES_BASES_TOP = 42,
    RBS_TYPES_BASES_VOID = 43,
    RBS_TYPES_BLOCK = 44,
    RBS_TYPES_CLASS_INSTANCE = 45,
    RBS_TYPES_CLASS_SINGLETON = 46,
    RBS_TYPES_FUNCTION = 47,
    RBS_TYPES_FUNCTION_PARAM = 48,
    RBS_TYPES_INTERFACE = 49,
    RBS_TYPES_INTERSECTION = 50,
    RBS_TYPES_LITERAL = 51,
    RBS_TYPES_OPTIONAL = 52,
    RBS_TYPES_PROC = 53,
    RBS_TYPES_RECORD = 54,
    RBS_TYPES_TUPLE = 55,
    RBS_TYPES_UNION = 56,
    RBS_TYPES_UNTYPED_FUNCTION = 57,
    RBS_TYPES_VARIABLE = 58,
    RBS_NODE_INSTANCE_WRAPPER = 59,
};

/*
 * Base struct for all nodes. It contains the type of the node.
 */
typedef struct rbs_node {
    enum rbs_node_type type;
} rbs_node_t;

typedef struct rbs_ast_annotation {
    rbs_node_t base;

    VALUE string;
    VALUE location;
} rbs_ast_annotation_t;

typedef struct rbs_ast_comment {
    rbs_node_t base;

    VALUE string;
    VALUE location;
} rbs_ast_comment_t;

typedef struct rbs_ast_declarations_class {
    rbs_node_t base;

    VALUE name;
    VALUE type_params;
    VALUE super_class;
    VALUE members;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_class_t;

typedef struct rbs_ast_declarations_class_super {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE location;
} rbs_ast_declarations_class_super_t;

typedef struct rbs_ast_declarations_class_alias {
    rbs_node_t base;

    VALUE new_name;
    VALUE old_name;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_class_alias_t;

typedef struct rbs_ast_declarations_constant {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_constant_t;

typedef struct rbs_ast_declarations_global {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_global_t;

typedef struct rbs_ast_declarations_interface {
    rbs_node_t base;

    VALUE name;
    VALUE type_params;
    VALUE members;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_interface_t;

typedef struct rbs_ast_declarations_module {
    rbs_node_t base;

    VALUE name;
    VALUE type_params;
    VALUE self_types;
    VALUE members;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_module_t;

typedef struct rbs_ast_declarations_module_self {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE location;
} rbs_ast_declarations_module_self_t;

typedef struct rbs_ast_declarations_module_alias {
    rbs_node_t base;

    VALUE new_name;
    VALUE old_name;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_module_alias_t;

typedef struct rbs_ast_declarations_type_alias {
    rbs_node_t base;

    VALUE name;
    VALUE type_params;
    VALUE type;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_type_alias_t;

typedef struct rbs_ast_directives_use {
    rbs_node_t base;

    VALUE clauses;
    VALUE location;
} rbs_ast_directives_use_t;

typedef struct rbs_ast_directives_use_single_clause {
    rbs_node_t base;

    VALUE type_name;
    VALUE new_name;
    VALUE location;
} rbs_ast_directives_use_single_clause_t;

typedef struct rbs_ast_directives_use_wildcard_clause {
    rbs_node_t base;

    VALUE namespace;
    VALUE location;
} rbs_ast_directives_use_wildcard_clause_t;

typedef struct rbs_ast_members_alias {
    rbs_node_t base;

    VALUE new_name;
    VALUE old_name;
    VALUE kind;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_members_alias_t;

typedef struct rbs_ast_members_attr_accessor {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE ivar_name;
    VALUE kind;
    VALUE annotations;
    VALUE location;
    VALUE comment;
    VALUE visibility;
} rbs_ast_members_attr_accessor_t;

typedef struct rbs_ast_members_attr_reader {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE ivar_name;
    VALUE kind;
    VALUE annotations;
    VALUE location;
    VALUE comment;
    VALUE visibility;
} rbs_ast_members_attr_reader_t;

typedef struct rbs_ast_members_attr_writer {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE ivar_name;
    VALUE kind;
    VALUE annotations;
    VALUE location;
    VALUE comment;
    VALUE visibility;
} rbs_ast_members_attr_writer_t;

typedef struct rbs_ast_members_class_instance_variable {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE location;
    VALUE comment;
} rbs_ast_members_class_instance_variable_t;

typedef struct rbs_ast_members_class_variable {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE location;
    VALUE comment;
} rbs_ast_members_class_variable_t;

typedef struct rbs_ast_members_extend {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_members_extend_t;

typedef struct rbs_ast_members_include {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_members_include_t;

typedef struct rbs_ast_members_instance_variable {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE location;
    VALUE comment;
} rbs_ast_members_instance_variable_t;

typedef struct rbs_ast_members_method_definition {
    rbs_node_t base;

    VALUE name;
    VALUE kind;
    VALUE overloads;
    VALUE annotations;
    VALUE location;
    VALUE comment;
    VALUE overloading;
    VALUE visibility;
} rbs_ast_members_method_definition_t;

typedef struct rbs_ast_members_method_definition_overload {
    rbs_node_t base;

    VALUE annotations;
    VALUE method_type;
} rbs_ast_members_method_definition_overload_t;

typedef struct rbs_ast_members_prepend {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_members_prepend_t;

typedef struct rbs_ast_members_private {
    rbs_node_t base;

    VALUE location;
} rbs_ast_members_private_t;

typedef struct rbs_ast_members_public {
    rbs_node_t base;

    VALUE location;
} rbs_ast_members_public_t;

typedef struct rbs_ast_type_param {
    rbs_node_t base;

    VALUE name;
    VALUE variance;
    VALUE upper_bound;
    VALUE default_type;
    VALUE location;
} rbs_ast_type_param_t;

typedef struct rbs_method_type {
    rbs_node_t base;

    VALUE type_params;
    VALUE type;
    VALUE block;
    VALUE location;
} rbs_method_type_t;

typedef struct rbs_namespace {
    rbs_node_t base;

    VALUE path;
    VALUE absolute;
} rbs_namespace_t;

typedef struct rbs_type_name {
    rbs_node_t base;

    VALUE namespace;
    VALUE name;
} rbs_type_name_t;

typedef struct rbs_types_alias {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE location;
} rbs_types_alias_t;

typedef struct rbs_types_bases_any {
    rbs_node_t base;

    VALUE todo;
    VALUE location;
} rbs_types_bases_any_t;

typedef struct rbs_types_bases_bool {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_bool_t;

typedef struct rbs_types_bases_bottom {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_bottom_t;

typedef struct rbs_types_bases_class {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_class_t;

typedef struct rbs_types_bases_instance {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_instance_t;

typedef struct rbs_types_bases_nil {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_nil_t;

typedef struct rbs_types_bases_self {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_self_t;

typedef struct rbs_types_bases_top {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_top_t;

typedef struct rbs_types_bases_void {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_void_t;

typedef struct rbs_types_block {
    rbs_node_t base;

    VALUE type;
    VALUE required;
    VALUE self_type;
} rbs_types_block_t;

typedef struct rbs_types_class_instance {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE location;
} rbs_types_class_instance_t;

typedef struct rbs_types_class_singleton {
    rbs_node_t base;

    VALUE name;
    VALUE location;
} rbs_types_class_singleton_t;

typedef struct rbs_types_function {
    rbs_node_t base;

    VALUE required_positionals;
    VALUE optional_positionals;
    VALUE rest_positionals;
    VALUE trailing_positionals;
    VALUE required_keywords;
    VALUE optional_keywords;
    VALUE rest_keywords;
    VALUE return_type;
} rbs_types_function_t;

typedef struct rbs_types_function_param {
    rbs_node_t base;

    VALUE type;
    VALUE name;
    VALUE location;
} rbs_types_function_param_t;

typedef struct rbs_types_interface {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE location;
} rbs_types_interface_t;

typedef struct rbs_types_intersection {
    rbs_node_t base;

    VALUE types;
    VALUE location;
} rbs_types_intersection_t;

typedef struct rbs_types_literal {
    rbs_node_t base;

    VALUE literal;
    VALUE location;
} rbs_types_literal_t;

typedef struct rbs_types_optional {
    rbs_node_t base;

    VALUE type;
    VALUE location;
} rbs_types_optional_t;

typedef struct rbs_types_proc {
    rbs_node_t base;

    VALUE type;
    VALUE block;
    VALUE location;
    VALUE self_type;
} rbs_types_proc_t;

typedef struct rbs_types_record {
    rbs_node_t base;

    VALUE all_fields;
    VALUE location;
} rbs_types_record_t;

typedef struct rbs_types_tuple {
    rbs_node_t base;

    VALUE types;
    VALUE location;
} rbs_types_tuple_t;

typedef struct rbs_types_union {
    rbs_node_t base;

    VALUE types;
    VALUE location;
} rbs_types_union_t;

typedef struct rbs_types_untyped_function {
    rbs_node_t base;

    VALUE return_type;
} rbs_types_untyped_function_t;

typedef struct rbs_types_variable {
    rbs_node_t base;

    VALUE name;
    VALUE location;
} rbs_types_variable_t;


/*
 * A temporary struct to wrap Ruby objects in the AST.
 *
 * It allows us to start handling `rbs_node_t*` structs in the parser and incrementally replace Ruby objects.
 *
 * TODO: Remove this once we do not use inner Ruby objects in our nodes.
 */
typedef struct {
    rbs_node_t base;
    VALUE instance;
} rbs_node_instance_wrapper_t;

rbs_ast_annotation_t *rbs_ast_annotation_new(VALUE string, VALUE location);
rbs_ast_comment_t *rbs_ast_comment_new(VALUE string, VALUE location);
rbs_ast_declarations_class_t *rbs_ast_declarations_class_new(VALUE name, VALUE type_params, VALUE super_class, VALUE members, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_declarations_class_super_t *rbs_ast_declarations_class_super_new(VALUE name, VALUE args, VALUE location);
rbs_ast_declarations_class_alias_t *rbs_ast_declarations_class_alias_new(VALUE new_name, VALUE old_name, VALUE location, VALUE comment);
rbs_ast_declarations_constant_t *rbs_ast_declarations_constant_new(VALUE name, VALUE type, VALUE location, VALUE comment);
rbs_ast_declarations_global_t *rbs_ast_declarations_global_new(VALUE name, VALUE type, VALUE location, VALUE comment);
rbs_ast_declarations_interface_t *rbs_ast_declarations_interface_new(VALUE name, VALUE type_params, VALUE members, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_declarations_module_t *rbs_ast_declarations_module_new(VALUE name, VALUE type_params, VALUE self_types, VALUE members, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_declarations_module_self_t *rbs_ast_declarations_module_self_new(VALUE name, VALUE args, VALUE location);
rbs_ast_declarations_module_alias_t *rbs_ast_declarations_module_alias_new(VALUE new_name, VALUE old_name, VALUE location, VALUE comment);
rbs_ast_declarations_type_alias_t *rbs_ast_declarations_type_alias_new(VALUE name, VALUE type_params, VALUE type, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_directives_use_t *rbs_ast_directives_use_new(VALUE clauses, VALUE location);
rbs_ast_directives_use_single_clause_t *rbs_ast_directives_use_single_clause_new(VALUE type_name, VALUE new_name, VALUE location);
rbs_ast_directives_use_wildcard_clause_t *rbs_ast_directives_use_wildcard_clause_new(VALUE namespace, VALUE location);
rbs_ast_members_alias_t *rbs_ast_members_alias_new(VALUE new_name, VALUE old_name, VALUE kind, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_members_attr_accessor_t *rbs_ast_members_attr_accessor_new(VALUE name, VALUE type, VALUE ivar_name, VALUE kind, VALUE annotations, VALUE location, VALUE comment, VALUE visibility);
rbs_ast_members_attr_reader_t *rbs_ast_members_attr_reader_new(VALUE name, VALUE type, VALUE ivar_name, VALUE kind, VALUE annotations, VALUE location, VALUE comment, VALUE visibility);
rbs_ast_members_attr_writer_t *rbs_ast_members_attr_writer_new(VALUE name, VALUE type, VALUE ivar_name, VALUE kind, VALUE annotations, VALUE location, VALUE comment, VALUE visibility);
rbs_ast_members_class_instance_variable_t *rbs_ast_members_class_instance_variable_new(VALUE name, VALUE type, VALUE location, VALUE comment);
rbs_ast_members_class_variable_t *rbs_ast_members_class_variable_new(VALUE name, VALUE type, VALUE location, VALUE comment);
rbs_ast_members_extend_t *rbs_ast_members_extend_new(VALUE name, VALUE args, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_members_include_t *rbs_ast_members_include_new(VALUE name, VALUE args, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_members_instance_variable_t *rbs_ast_members_instance_variable_new(VALUE name, VALUE type, VALUE location, VALUE comment);
rbs_ast_members_method_definition_t *rbs_ast_members_method_definition_new(VALUE name, VALUE kind, VALUE overloads, VALUE annotations, VALUE location, VALUE comment, VALUE overloading, VALUE visibility);
rbs_ast_members_method_definition_overload_t *rbs_ast_members_method_definition_overload_new(VALUE annotations, VALUE method_type);
rbs_ast_members_prepend_t *rbs_ast_members_prepend_new(VALUE name, VALUE args, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_members_private_t *rbs_ast_members_private_new(VALUE location);
rbs_ast_members_public_t *rbs_ast_members_public_new(VALUE location);
rbs_ast_type_param_t *rbs_ast_type_param_new(VALUE name, VALUE variance, VALUE upper_bound, VALUE default_type, VALUE location);
rbs_method_type_t *rbs_method_type_new(VALUE type_params, VALUE type, VALUE block, VALUE location);
rbs_namespace_t *rbs_namespace_new(VALUE path, VALUE absolute);
rbs_type_name_t *rbs_type_name_new(VALUE namespace, VALUE name);
rbs_types_alias_t *rbs_types_alias_new(VALUE name, VALUE args, VALUE location);
rbs_types_bases_any_t *rbs_types_bases_any_new(VALUE todo, VALUE location);
rbs_types_bases_bool_t *rbs_types_bases_bool_new(VALUE location);
rbs_types_bases_bottom_t *rbs_types_bases_bottom_new(VALUE location);
rbs_types_bases_class_t *rbs_types_bases_class_new(VALUE location);
rbs_types_bases_instance_t *rbs_types_bases_instance_new(VALUE location);
rbs_types_bases_nil_t *rbs_types_bases_nil_new(VALUE location);
rbs_types_bases_self_t *rbs_types_bases_self_new(VALUE location);
rbs_types_bases_top_t *rbs_types_bases_top_new(VALUE location);
rbs_types_bases_void_t *rbs_types_bases_void_new(VALUE location);
rbs_types_block_t *rbs_types_block_new(VALUE type, VALUE required, VALUE self_type);
rbs_types_class_instance_t *rbs_types_class_instance_new(VALUE name, VALUE args, VALUE location);
rbs_types_class_singleton_t *rbs_types_class_singleton_new(VALUE name, VALUE location);
rbs_types_function_t *rbs_types_function_new(VALUE required_positionals, VALUE optional_positionals, VALUE rest_positionals, VALUE trailing_positionals, VALUE required_keywords, VALUE optional_keywords, VALUE rest_keywords, VALUE return_type);
rbs_types_function_param_t *rbs_types_function_param_new(VALUE type, VALUE name, VALUE location);
rbs_types_interface_t *rbs_types_interface_new(VALUE name, VALUE args, VALUE location);
rbs_types_intersection_t *rbs_types_intersection_new(VALUE types, VALUE location);
rbs_types_literal_t *rbs_types_literal_new(VALUE literal, VALUE location);
rbs_types_optional_t *rbs_types_optional_new(VALUE type, VALUE location);
rbs_types_proc_t *rbs_types_proc_new(VALUE type, VALUE block, VALUE location, VALUE self_type);
rbs_types_record_t *rbs_types_record_new(VALUE all_fields, VALUE location);
rbs_types_tuple_t *rbs_types_tuple_new(VALUE types, VALUE location);
rbs_types_union_t *rbs_types_union_new(VALUE types, VALUE location);
rbs_types_untyped_function_t *rbs_types_untyped_function_new(VALUE return_type);
rbs_types_variable_t *rbs_types_variable_new(VALUE name, VALUE location);

rbs_node_instance_wrapper_t *rbs_node_instance_wrapper_new(VALUE instance);

#endif
