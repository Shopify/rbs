/*----------------------------------------------------------------------------*/
/* This file is generated by the templates/template.rb script and should not  */
/* be modified manually.                                                      */
/* To change the template see                                                 */
/* templates/include/rbs/ast.h.erb                                            */
/*----------------------------------------------------------------------------*/

#ifndef RBS__AST_H
#define RBS__AST_H

#include "ruby.h"
#include "rbs/util/rbs_allocator.h"

typedef struct rbs_node {
    VALUE cached_ruby_value;
} rbs_node_t;

typedef struct {
    rbs_node_t base;

    VALUE string;
    VALUE location;
} rbs_ast_annotation_t;

typedef struct {
    rbs_node_t base;

    VALUE string;
    VALUE location;
} rbs_ast_comment_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE type_params;
    VALUE super_class;
    VALUE members;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_class_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE location;
} rbs_ast_declarations_class_super_t;

typedef struct {
    rbs_node_t base;

    VALUE new_name;
    VALUE old_name;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_classalias_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_constant_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_global_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE type_params;
    VALUE members;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_interface_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE type_params;
    VALUE self_types;
    VALUE members;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_module_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE location;
} rbs_ast_declarations_module_self_t;

typedef struct {
    rbs_node_t base;

    VALUE new_name;
    VALUE old_name;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_modulealias_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE type_params;
    VALUE type;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_declarations_typealias_t;

typedef struct {
    rbs_node_t base;

    VALUE clauses;
    VALUE location;
} rbs_ast_directives_use_t;

typedef struct {
    rbs_node_t base;

    VALUE type_name;
    VALUE new_name;
    VALUE location;
} rbs_ast_directives_use_singleclause_t;

typedef struct {
    rbs_node_t base;

    VALUE namespace;
    VALUE location;
} rbs_ast_directives_use_wildcardclause_t;

typedef struct {
    rbs_node_t base;

    VALUE new_name;
    VALUE old_name;
    VALUE kind;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_members_alias_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE ivar_name;
    VALUE kind;
    VALUE annotations;
    VALUE location;
    VALUE comment;
    VALUE visibility;
} rbs_ast_members_attraccessor_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE ivar_name;
    VALUE kind;
    VALUE annotations;
    VALUE location;
    VALUE comment;
    VALUE visibility;
} rbs_ast_members_attrreader_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE ivar_name;
    VALUE kind;
    VALUE annotations;
    VALUE location;
    VALUE comment;
    VALUE visibility;
} rbs_ast_members_attrwriter_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE location;
    VALUE comment;
} rbs_ast_members_classinstancevariable_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE location;
    VALUE comment;
} rbs_ast_members_classvariable_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_members_extend_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_members_include_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE type;
    VALUE location;
    VALUE comment;
} rbs_ast_members_instancevariable_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE kind;
    VALUE overloads;
    VALUE annotations;
    VALUE location;
    VALUE comment;
    VALUE overloading;
    VALUE visibility;
} rbs_ast_members_methoddefinition_t;

typedef struct {
    rbs_node_t base;

    VALUE annotations;
    VALUE method_type;
} rbs_ast_members_methoddefinition_overload_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE annotations;
    VALUE location;
    VALUE comment;
} rbs_ast_members_prepend_t;

typedef struct {
    rbs_node_t base;

    VALUE location;
} rbs_ast_members_private_t;

typedef struct {
    rbs_node_t base;

    VALUE location;
} rbs_ast_members_public_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE variance;
    VALUE upper_bound;
    VALUE default_type;
    VALUE unchecked;
    VALUE location;
} rbs_ast_typeparam_t;

typedef struct {
    rbs_node_t base;

    VALUE type_params;
    VALUE type;
    VALUE block;
    VALUE location;
} rbs_methodtype_t;

typedef struct {
    rbs_node_t base;

    VALUE path;
    VALUE absolute;
} rbs_namespace_t;

typedef struct {
    rbs_node_t base;

    VALUE namespace;
    VALUE name;
} rbs_typename_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE location;
} rbs_types_alias_t;

typedef struct {
    rbs_node_t base;

    VALUE todo;
    VALUE location;
} rbs_types_bases_any_t;

typedef struct {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_bool_t;

typedef struct {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_bottom_t;

typedef struct {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_class_t;

typedef struct {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_instance_t;

typedef struct {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_nil_t;

typedef struct {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_self_t;

typedef struct {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_top_t;

typedef struct {
    rbs_node_t base;

    VALUE location;
} rbs_types_bases_void_t;

typedef struct {
    rbs_node_t base;

    VALUE type;
    VALUE required;
    VALUE self_type;
} rbs_types_block_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE location;
} rbs_types_classinstance_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE location;
} rbs_types_classsingleton_t;

typedef struct {
    rbs_node_t base;

    VALUE required_positionals;
    VALUE optional_positionals;
    VALUE rest_positionals;
    VALUE trailing_positionals;
    VALUE required_keywords;
    VALUE optional_keywords;
    VALUE rest_keywords;
    VALUE return_type;
} rbs_types_function_t;

typedef struct {
    rbs_node_t base;

    VALUE type;
    VALUE name;
    VALUE location;
} rbs_types_function_param_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE args;
    VALUE location;
} rbs_types_interface_t;

typedef struct {
    rbs_node_t base;

    VALUE types;
    VALUE location;
} rbs_types_intersection_t;

typedef struct {
    rbs_node_t base;

    VALUE literal;
    VALUE location;
} rbs_types_literal_t;

typedef struct {
    rbs_node_t base;

    VALUE type;
    VALUE location;
} rbs_types_optional_t;

typedef struct {
    rbs_node_t base;

    VALUE type;
    VALUE block;
    VALUE location;
    VALUE self_type;
} rbs_types_proc_t;

typedef struct {
    rbs_node_t base;

    VALUE all_fields;
    VALUE location;
} rbs_types_record_t;

typedef struct {
    rbs_node_t base;

    VALUE types;
    VALUE location;
} rbs_types_tuple_t;

typedef struct {
    rbs_node_t base;

    VALUE types;
    VALUE location;
} rbs_types_union_t;

typedef struct {
    rbs_node_t base;

    VALUE return_type;
} rbs_types_untypedfunction_t;

typedef struct {
    rbs_node_t base;

    VALUE name;
    VALUE location;
} rbs_types_variable_t;


rbs_ast_annotation_t *rbs_ast_annotation_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE string, VALUE location);
rbs_ast_comment_t *rbs_ast_comment_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE string, VALUE location);
rbs_ast_declarations_class_t *rbs_ast_declarations_class_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE type_params, VALUE super_class, VALUE members, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_declarations_class_super_t *rbs_ast_declarations_class_super_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE args, VALUE location);
rbs_ast_declarations_classalias_t *rbs_ast_declarations_classalias_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE new_name, VALUE old_name, VALUE location, VALUE comment);
rbs_ast_declarations_constant_t *rbs_ast_declarations_constant_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE type, VALUE location, VALUE comment);
rbs_ast_declarations_global_t *rbs_ast_declarations_global_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE type, VALUE location, VALUE comment);
rbs_ast_declarations_interface_t *rbs_ast_declarations_interface_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE type_params, VALUE members, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_declarations_module_t *rbs_ast_declarations_module_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE type_params, VALUE self_types, VALUE members, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_declarations_module_self_t *rbs_ast_declarations_module_self_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE args, VALUE location);
rbs_ast_declarations_modulealias_t *rbs_ast_declarations_modulealias_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE new_name, VALUE old_name, VALUE location, VALUE comment);
rbs_ast_declarations_typealias_t *rbs_ast_declarations_typealias_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE type_params, VALUE type, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_directives_use_t *rbs_ast_directives_use_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE clauses, VALUE location);
rbs_ast_directives_use_singleclause_t *rbs_ast_directives_use_singleclause_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE type_name, VALUE new_name, VALUE location);
rbs_ast_directives_use_wildcardclause_t *rbs_ast_directives_use_wildcardclause_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE namespace, VALUE location);
rbs_ast_members_alias_t *rbs_ast_members_alias_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE new_name, VALUE old_name, VALUE kind, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_members_attraccessor_t *rbs_ast_members_attraccessor_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE type, VALUE ivar_name, VALUE kind, VALUE annotations, VALUE location, VALUE comment, VALUE visibility);
rbs_ast_members_attrreader_t *rbs_ast_members_attrreader_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE type, VALUE ivar_name, VALUE kind, VALUE annotations, VALUE location, VALUE comment, VALUE visibility);
rbs_ast_members_attrwriter_t *rbs_ast_members_attrwriter_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE type, VALUE ivar_name, VALUE kind, VALUE annotations, VALUE location, VALUE comment, VALUE visibility);
rbs_ast_members_classinstancevariable_t *rbs_ast_members_classinstancevariable_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE type, VALUE location, VALUE comment);
rbs_ast_members_classvariable_t *rbs_ast_members_classvariable_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE type, VALUE location, VALUE comment);
rbs_ast_members_extend_t *rbs_ast_members_extend_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE args, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_members_include_t *rbs_ast_members_include_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE args, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_members_instancevariable_t *rbs_ast_members_instancevariable_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE type, VALUE location, VALUE comment);
rbs_ast_members_methoddefinition_t *rbs_ast_members_methoddefinition_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE kind, VALUE overloads, VALUE annotations, VALUE location, VALUE comment, VALUE overloading, VALUE visibility);
rbs_ast_members_methoddefinition_overload_t *rbs_ast_members_methoddefinition_overload_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE annotations, VALUE method_type);
rbs_ast_members_prepend_t *rbs_ast_members_prepend_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE args, VALUE annotations, VALUE location, VALUE comment);
rbs_ast_members_private_t *rbs_ast_members_private_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE location);
rbs_ast_members_public_t *rbs_ast_members_public_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE location);
rbs_ast_typeparam_t *rbs_ast_typeparam_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE variance, VALUE upper_bound, VALUE default_type, VALUE unchecked, VALUE location);
rbs_methodtype_t *rbs_methodtype_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE type_params, VALUE type, VALUE block, VALUE location);
rbs_namespace_t *rbs_namespace_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE path, VALUE absolute);
rbs_typename_t *rbs_typename_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE namespace, VALUE name);
rbs_types_alias_t *rbs_types_alias_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE args, VALUE location);
rbs_types_bases_any_t *rbs_types_bases_any_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE todo, VALUE location);
rbs_types_bases_bool_t *rbs_types_bases_bool_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE location);
rbs_types_bases_bottom_t *rbs_types_bases_bottom_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE location);
rbs_types_bases_class_t *rbs_types_bases_class_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE location);
rbs_types_bases_instance_t *rbs_types_bases_instance_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE location);
rbs_types_bases_nil_t *rbs_types_bases_nil_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE location);
rbs_types_bases_self_t *rbs_types_bases_self_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE location);
rbs_types_bases_top_t *rbs_types_bases_top_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE location);
rbs_types_bases_void_t *rbs_types_bases_void_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE location);
rbs_types_block_t *rbs_types_block_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE type, VALUE required, VALUE self_type);
rbs_types_classinstance_t *rbs_types_classinstance_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE args, VALUE location);
rbs_types_classsingleton_t *rbs_types_classsingleton_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE location);
rbs_types_function_t *rbs_types_function_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE required_positionals, VALUE optional_positionals, VALUE rest_positionals, VALUE trailing_positionals, VALUE required_keywords, VALUE optional_keywords, VALUE rest_keywords, VALUE return_type);
rbs_types_function_param_t *rbs_types_function_param_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE type, VALUE name, VALUE location);
rbs_types_interface_t *rbs_types_interface_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE args, VALUE location);
rbs_types_intersection_t *rbs_types_intersection_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE types, VALUE location);
rbs_types_literal_t *rbs_types_literal_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE literal, VALUE location);
rbs_types_optional_t *rbs_types_optional_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE type, VALUE location);
rbs_types_proc_t *rbs_types_proc_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE type, VALUE block, VALUE location, VALUE self_type);
rbs_types_record_t *rbs_types_record_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE all_fields, VALUE location);
rbs_types_tuple_t *rbs_types_tuple_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE types, VALUE location);
rbs_types_union_t *rbs_types_union_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE types, VALUE location);
rbs_types_untypedfunction_t *rbs_types_untypedfunction_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE return_type);
rbs_types_variable_t *rbs_types_variable_new(rbs_allocator_t *allocator, VALUE ruby_value, VALUE name, VALUE location);

VALUE rbs_struct_to_ruby_value(rbs_node_t *instance);

#endif
