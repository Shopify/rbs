module RBS
  module AST
    module Ruby
      module Members
        class Base
          attr_reader buffer: Buffer

          def initialize: (Buffer) -> void

          include Helpers::LocationHelper
        end

        type t = DefMember

        class MethodTypeAnnotation
          type type_annotations = Annotations::NodeTypeAssertion | Array[Annotations::ColonMethodTypeAnnotation | Annotations::MethodTypesAnnotation] | nil

          attr_reader type_annotations: type_annotations

          def initialize: (type_annotations: type_annotations) -> void

          def map_type_name: { (TypeName) -> TypeName } -> self

          # Returns the method type annotations from the comment block
          #
          # Returns a tuple of `DefAnnotations` object, array of unused leading annotations, and unused trailing annotation.
          #
          def self.build: (CommentBlock? leading_block, CommentBlock? trailing_block, Array[Symbol]) -> [
            MethodTypeAnnotation,
            Array[Annotations::leading_annotation | CommentBlock::AnnotationSyntaxError],
            Annotations::trailing_annotation | CommentBlock::AnnotationSyntaxError | nil
          ]

          # Returns `true` if it doesn't have any annotation
          def empty?: () -> bool
        end

        class DefMember < Base
          class Overload = AST::Members::MethodDefinition::Overload

          attr_reader name: Symbol
          attr_reader node: Prism::DefNode

          def initialize: (Buffer, Symbol name, Prism::DefNode node) -> void

          def location: () -> Location

          def overloads: () -> Array[Overload]

          def overloading?: () -> bool

          def annotations: () -> Array[AST::Annotation]
        end
      end
    end
  end
end
