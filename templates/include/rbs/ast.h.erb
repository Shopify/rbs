#ifndef RBS__AST_H
#define RBS__AST_H

#include "ruby.h"
#include "rbs_location.h"

enum rbs_node_type {
<%- nodes.each_with_index do |node, index| -%>
    <%= node.c_type_enum_name %> = <%= index + 1 %>,
<%- end -%>
};

typedef struct rbs_node {
    VALUE cached_ruby_value;
    enum rbs_node_type type;
} rbs_node_t;

typedef struct rbs_node_list_node {
    rbs_node_t *node;
    struct rbs_node_list_node *next;
} rbs_node_list_node_t;

typedef struct rbs_node_list {
    rbs_node_list_node_t *head;
    rbs_node_list_node_t *tail;
    size_t length;
    VALUE cached_ruby_value;
} rbs_node_list_t;

rbs_node_list_t* rbs_node_list_new(void);

void rbs_node_list_free(rbs_node_list_t *list);

void rbs_node_list_append(rbs_node_list_t *list, rbs_node_t *node);

<%- nodes.each do |node| -%>
typedef struct <%= node.c_base_name %> {
    rbs_node_t base;

    <%- node.fields.each do |field| -%>
    <%= field.stored_field_decl %>;
    <%- end -%>
} <%= node.c_type_name %>;

<%- end -%>

<%-
nodes.each do |node|

parameters = node.constructor_parameters
-%>
<%= node.c_type_name %> *<%= node.c_constructor_function_name %>(<%= parameters.map(&:parameter_decl).join(", ") %>);
<%- end -%>

VALUE rbs_struct_to_ruby_value(rbs_node_t *instance);

#endif
