#ifndef RBS__AST_H
#define RBS__AST_H

#include "rbs_string.h"
#include "rbs_location.h"
#include "rbs/util/rbs_constant_pool.h"

enum rbs_node_type {
    RBS_OTHER_RUBY_VALUE = 0,
<%- nodes.each_with_index do |node, index| -%>
    <%= node.c_type_enum_name %> = <%= index + 1 %>,
<%- end -%>
    RBS_KEYWORD,
    RBS_AST_SYMBOL,
};

typedef struct rbs_node {
    enum rbs_node_type type;
} rbs_node_t;

/// A bag of values needed when copying RBS C structs into Ruby objects.
typedef struct rbs_translation_context {
    rbs_constant_pool_t *constant_pool;
    VALUE buffer;
} rbs_translation_context_t;

/* rbs_node_list_node */

typedef struct rbs_node_list_node {
    rbs_node_t *node;
    struct rbs_node_list_node *next;
} rbs_node_list_node_t;

typedef struct rbs_node_list {
    rbs_node_list_node_t *head;
    rbs_node_list_node_t *tail;
    size_t length;
} rbs_node_list_t;

rbs_node_list_t* rbs_node_list_new(void);

void rbs_node_list_free(rbs_node_list_t *list);

void rbs_node_list_append(rbs_node_list_t *list, rbs_node_t *node);

/* rbs_hash */

typedef struct rbs_hash_node {
    rbs_node_t *key;
    rbs_node_t *value;
    struct rbs_hash_node *next;
} rbs_hash_node_t;

typedef struct rbs_hash {
    rbs_hash_node_t *head;
    rbs_hash_node_t *tail;
    size_t length;
} rbs_hash_t;

rbs_hash_t* rbs_hash_new(void);

void rbs_hash_free(rbs_hash_t *hash);

void rbs_hash_set(rbs_hash_t *hash, rbs_node_t *key, rbs_node_t *value);

rbs_hash_node_t* rbs_hash_find(rbs_hash_t *hash, rbs_node_t *key);

rbs_node_t* rbs_hash_get(rbs_hash_t *hash, rbs_node_t *key);

/* rbs_ast_node */

<%- nodes.each do |node| -%>
typedef struct <%= node.c_base_name %> {
    rbs_node_t base;

    <%- node.fields.each do |field| -%>
    <%= field.stored_field_decl %>;
    <%- end -%>
} <%= node.c_type_name %>;

<%- end -%>

/// `rbs_keyword_t` models RBS keywords like "private", "instance", "covariant", etc.
/// These are stored in the global constant pool, and get surfaced to Ruby as `Symbol`s,
/// just like `rbs_ast_symbol_t`s.
typedef struct rbs_keyword {
    rbs_node_t base;
    rbs_constant_id_t constant_id;
} rbs_keyword_t;

rbs_keyword_t *rbs_keyword_new(rbs_constant_id_t);

/// `rbs_ast_symbol_t` models user-defined identifiers like class names, method names, etc.
/// These get stored in the parser's own constant pool, and get surfaced to Ruby as `Symbol`s.
typedef struct rbs_ast_symbol {
    rbs_node_t base;
    rbs_constant_id_t constant_id;
} rbs_ast_symbol_t;

rbs_ast_symbol_t *rbs_ast_symbol_new(rbs_constant_pool_t *, rbs_constant_id_t);

typedef struct rbs_other_ruby_value {
    rbs_node_t base;
    VALUE ruby_value;
} rbs_other_ruby_value_t;

rbs_other_ruby_value_t *rbs_other_ruby_value_new(VALUE ruby_value);

<%- nodes.each do |node| -%>
<%= node.c_type_name %> *<%= node.c_constructor_function_name %>(<%= node.fields.map(&:parameter_decl).join(", ") %>);
<%- end -%>

#endif
