#include "rbs/ast.h"

#include <stdlib.h>
#include "class_constants.h"
#include "rbs_string_bridging.h"
#include "ruby/encoding.h"

/* rbs_node_list */

rbs_node_list_t* rbs_node_list_new(void) {
    rbs_node_list_t *list = (rbs_node_list_t *)malloc(sizeof(rbs_node_list_t));
    list->head = NULL;
    list->tail = NULL;
    list->length = 0;

    return list;
}

void rbs_node_list_free(rbs_node_list_t *list) {
    rbs_node_list_node_t *current = list->head;
    while (current != NULL) {
        rbs_node_list_node_t *next = current->next;
        free(current);
        current = next;
    }
    free(list);
}

void rbs_node_list_append(rbs_node_list_t *list, rbs_node_t *node) {
    rbs_node_list_node_t *new_node = (rbs_node_list_node_t *)malloc(sizeof(rbs_node_list_node_t));
    new_node->node = node;
    new_node->next = NULL;

    if (list->tail == NULL) {
        list->head = new_node;
        list->tail = new_node;
    } else {
        list->tail->next = new_node;
        list->tail = new_node;
    }

    list->length++;
}

VALUE rbs_node_list_to_ruby_array(rbs_node_list_t *list) {
    VALUE array = rb_ary_new();

    rbs_node_list_node_t *current = list->head;
    while (current != NULL) {
        rb_ary_push(array, rbs_struct_to_ruby_value(current->node));
        current = current->next;
    }

    return array;
}

/* rbs_hash */

rbs_hash_t* rbs_hash_new(void) {
    rbs_hash_t *hash = (rbs_hash_t *)malloc(sizeof(rbs_hash_t));
    hash->head = NULL;
    hash->tail = NULL;
    hash->length = 0;

    return hash;
}

void rbs_hash_free(rbs_hash_t *hash) {
    rbs_hash_node_t *current = hash->head;
    while (current != NULL) {
        rbs_hash_node_t *next = current->next;
        free(current);
        current = next;
    }
    free(hash);
}

rbs_hash_node_t* rbs_hash_find(rbs_hash_t *hash, rbs_node_t *key) {
    rbs_hash_node_t *current = hash->head;

    while (current != NULL) {
        if (rb_equal(rbs_struct_to_ruby_value(key), rbs_struct_to_ruby_value(current->key))) {
            return current;
        }
        current = current->next;
    }

    return NULL;
}

void rbs_hash_set(rbs_hash_t *hash, rbs_node_t *key, rbs_node_t *value) {
    rbs_hash_node_t *existing_node = rbs_hash_find(hash, key);
    if (existing_node != NULL) {
        existing_node->value = value;
        return;
    }

    rbs_hash_node_t *new_node = (rbs_hash_node_t *)malloc(sizeof(rbs_hash_node_t));
    new_node->key = key;
    new_node->value = value;
    new_node->next = NULL;

    if (hash->tail == NULL) {
        hash->head = new_node;
        hash->tail = new_node;
    } else {
        hash->tail->next = new_node;
        hash->tail = new_node;
    }
}

rbs_node_t* rbs_hash_get(rbs_hash_t *hash, rbs_node_t *key) {
    rbs_hash_node_t *node = rbs_hash_find(hash, key);
    return node ? node->value : NULL;
}

VALUE rbs_hash_to_ruby_hash(rbs_hash_t *hash) {
    VALUE ruby_hash = rb_hash_new();

    rbs_hash_node_t *current = hash->head;
    while (current != NULL) {
        rb_hash_aset(ruby_hash, rbs_struct_to_ruby_value(current->key), rbs_struct_to_ruby_value(current->value));
        current = current->next;
    }

    return ruby_hash;
}

rbs_ast_symbol_t *rbs_ast_symbol_new(rbs_constant_id_t constant_id) {
    rbs_ast_symbol_t *instance = (rbs_ast_symbol_t *)calloc(1, sizeof(rbs_ast_symbol_t));

    *instance = (rbs_ast_symbol_t) {
        .base = (rbs_node_t) {
            .type = RBS_AST_SYMBOL
        },
        .constant_id = constant_id,
    };

    return instance;
}

rbs_other_ruby_value_t *rbs_other_ruby_value_new(VALUE ruby_value) {
    rb_gc_register_mark_object(ruby_value);

    rbs_other_ruby_value_t *instance = (rbs_other_ruby_value_t *)calloc(1, sizeof(rbs_other_ruby_value_t));

    *instance = (rbs_other_ruby_value_t) {
        .base = (rbs_node_t) {
            .type = RBS_OTHER_RUBY_VALUE
        },
        .ruby_value = ruby_value,
    };

    return instance;
}

<%- nodes.each do |node| -%>
<%= node.c_type_name %> *<%= node.c_constructor_function_name %>(<%= node.fields.map(&:parameter_decl).join(", ") %>) {
    <%= node.c_type_name %> *instance = (<%= node.c_type_name %> *)calloc(1, sizeof(<%= node.c_type_name %>));

    <%- node.fields.each do |field| -%>
    <%- if field.c_type == "VALUE" -%>
    rb_gc_register_mark_object(<%= field.name %>);
    <%- end -%>
    <%- end -%>

    *instance = (<%= node.c_type_name %>) {
        .base = (rbs_node_t) {
            .type = <%= node.c_type_enum_name %>
        },
        <%- node.fields.each do |field| -%>
        .<%= field.name %> = <%= field.name %>,
        <%- end -%>
    };

    return instance;
}

<%- end -%>

#ifdef RB_PASS_KEYWORDS
  // Ruby 2.7 or later
  #define CLASS_NEW_INSTANCE(klass, argc, argv)\
          rb_class_new_instance_kw(argc, argv, klass, RB_PASS_KEYWORDS)
#else
  // Ruby 2.6
  #define CLASS_NEW_INSTANCE(receiver, argc, argv)\
          rb_class_new_instance(argc, argv, receiver)
#endif

VALUE rbs_struct_to_ruby_value(rbs_node_t *instance) {
    if (instance == NULL) return Qnil;

    switch (instance->type) {
        <%- nodes.each do |node| -%>
        case <%= node.c_type_enum_name %>: {
            <%- case node.ruby_full_name -%>
            <%- when "RBS::AST::Bool" -%>
            return ((rbs_ast_bool_t *) instance)->value ? Qtrue : Qfalse;

            <%- when "RBS::AST::Integer" -%>
            rbs_ast_integer_t *integer_node = (rbs_ast_integer_t *) instance;
            rbs_string_t string_repr = integer_node->string_representation;

            VALUE str = rb_enc_str_new(string_repr.start, rbs_string_len(string_repr), rb_utf8_encoding());

            return rb_funcall(str, rb_intern("to_i"), 0);

            <%- when "RBS::AST::String" -%>
            rbs_ast_string_t *string_node = (rbs_ast_string_t *) instance;
            rbs_string_t s = string_node->string;

            return rb_enc_str_new(s.start, rbs_string_len(s), rb_utf8_encoding());

            <%- when "RBS::Types::Record::FieldType" -%>
            rbs_types_record_fieldtype_t *record_fieldtype = (rbs_types_record_fieldtype_t *) instance;

            VALUE array = rb_ary_new();
            rb_ary_push(array, rbs_struct_to_ruby_value(record_fieldtype->type));
            rb_ary_push(array, record_fieldtype->required ? Qtrue : Qfalse);
            return array;

            <%- when "RBS::Signature" -%>
            rbs_signature_t *signature = (rbs_signature_t *) instance;

            VALUE array = rb_ary_new();
            rb_ary_push(array, rbs_node_list_to_ruby_array(signature->directives));
            rb_ary_push(array, rbs_node_list_to_ruby_array(signature->declarations));
            return array;
            <%- else -%>
            <%- if node.fields.any? -%> <%# This prevents "warning: unused variable 'node'" %>
            <%= node.c_type_name %> *node = (<%= node.c_type_name %> *)instance;
            <%- end -%>
            // <%= node.fields.inspect %>
            VALUE h = rb_hash_new();
            <%- node.fields.each do |field| -%>
            <%- case field.c_type -%>
            <%- when "VALUE" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), node-><%= field.name %>);
            <%- when "rbs_node_list" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), rbs_node_list_to_ruby_array(node-><%= field.name %>));
            <%- when "rbs_hash" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), rbs_hash_to_ruby_hash(node-><%= field.name %>));
            <%- when "rbs_location" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), rbs_loc_to_ruby_location(node-><%= field.name %>));
            <%- when "rbs_string" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), rbs_string_to_ruby_string(&node-><%= field.name %>));
            <%- when "bool" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), node-><%= field.name %> ? Qtrue : Qfalse);
            <%- else -%>
            <%- unless field.ast_node? -%>
            #warning unexpected type <%= field.c_type -%>
            <%- end -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), rbs_struct_to_ruby_value((rbs_node_t *) node-><%= field.name %>)); // <%= field.c_type %>
            <%- end -%>
            <%- end -%>

            <%- case node.ruby_full_name -%>
            <%- when "RBS::AST::Declarations::Class", "RBS::AST::Declarations::Module", "RBS::AST::Declarations::Interface", "RBS::AST::Declarations::TypeAlias", "RBS::MethodType" -%>
            rb_funcall(
              RBS_AST_TypeParam,
              rb_intern("resolve_variables"),
              1,
              rb_hash_lookup(h, ID2SYM(rb_intern("type_params")))
            );
            <%- end -%>

            return CLASS_NEW_INSTANCE(
                <%= node.c_constant_name %>,
                1,
                &h
            );
            <%- end -%>
        }
        <%- end -%>
        case RBS_AST_SYMBOL: {
            rbs_constant_t *constant = rbs_constant_pool_id_to_constant(fake_constant_pool, ((rbs_ast_symbol_t *) instance)->constant_id);
            assert(constant != NULL);
            assert(constant->start != NULL);

            rb_encoding *fake_encoding = rb_utf8_encoding();
            VALUE ruby_symbol = ID2SYM(rb_intern3(constant->start, constant->length, fake_encoding));

            return ruby_symbol;
        }
        case RBS_OTHER_RUBY_VALUE: {
            return ((rbs_other_ruby_value_t *) instance)->ruby_value;
        }
    }
}
