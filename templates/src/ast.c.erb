#include "rbs/ast.h"
#include <stdlib.h>

rbs_node_list_t* rbs_node_list_new(void) {
    rbs_node_list_t *list = (rbs_node_list_t *)malloc(sizeof(rbs_node_list_t));
    list->head = NULL;
    list->tail = NULL;
    list->length = 0;
    list->cached_ruby_value = rb_ary_new();

    rb_gc_register_mark_object(list->cached_ruby_value);

    return list;
}

void rbs_node_list_free(rbs_node_list_t *list) {
    rbs_node_list_node_t *current = list->head;
    while (current != NULL) {
        rbs_node_list_node_t *next = current->next;
        free(current);
        current = next;
    }
    free(list);
}

void rbs_node_list_append(rbs_node_list_t *list, rbs_node_t *node) {
    rb_gc_register_mark_object(node->cached_ruby_value);

    rbs_node_list_node_t *new_node = (rbs_node_list_node_t *)malloc(sizeof(rbs_node_list_node_t));
    new_node->node = node;
    new_node->next = NULL;

    if (list->tail == NULL) {
        list->head = new_node;
        list->tail = new_node;
    } else {
        list->tail->next = new_node;
        list->tail = new_node;
    }
    list->length++;

    rb_ary_push(list->cached_ruby_value, node->cached_ruby_value);
}

<%- nodes.each do |node| -%>
<%= node.c_type_name %> *<%= node.c_constructor_function_name %>(VALUE ruby_value<%= node.fields.map { |field| ", VALUE #{field.name}" }.join %>) {
    <%= node.c_type_name %> *instance = malloc(sizeof(<%= node.c_type_name %>));

    rb_gc_register_mark_object(ruby_value);
    <%- node.fields.each do |field| -%>
    rb_gc_register_mark_object(<%= field.name %>);
    <%- end -%>

    *instance = (<%= node.c_type_name %>) {
        .base = (rbs_node_t) {
            .cached_ruby_value = ruby_value,
            .type = <%= node.c_type_enum_name %>
        },
        <%- node.fields.each do |field| -%>
        .<%= field.name %> = <%= field.name %>,
        <%- end -%>
    };

    return instance;
}

<%- end -%>
