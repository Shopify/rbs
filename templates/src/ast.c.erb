#include "rbs/ast.h"

#include <stdlib.h>
#include "rbs/ruby_objs.h"

rbs_node_list_t* rbs_node_list_new(void) {
    rbs_node_list_t *list = (rbs_node_list_t *)malloc(sizeof(rbs_node_list_t));
    list->head = NULL;
    list->tail = NULL;
    list->length = 0;
    list->cached_ruby_value = rb_ary_new();

    rb_gc_register_mark_object(list->cached_ruby_value);

    return list;
}

void rbs_node_list_free(rbs_node_list_t *list) {
    rbs_node_list_node_t *current = list->head;
    while (current != NULL) {
        rbs_node_list_node_t *next = current->next;
        free(current);
        current = next;
    }
    free(list);
}

void rbs_node_list_append(rbs_node_list_t *list, rbs_node_t *node) {
    rb_gc_register_mark_object(node->cached_ruby_value);

    rbs_node_list_node_t *new_node = (rbs_node_list_node_t *)malloc(sizeof(rbs_node_list_node_t));
    new_node->node = node;
    new_node->next = NULL;

    if (list->tail == NULL) {
        list->head = new_node;
        list->tail = new_node;
    } else {
        list->tail->next = new_node;
        list->tail = new_node;
    }
    list->length++;

    rb_ary_push(list->cached_ruby_value, node->cached_ruby_value);
}

<%-
nodes.each do |node|

parameters = node.constructor_parameters
-%>
<%= node.c_type_name %> *<%= node.c_constructor_function_name %>(<%= parameters.map { |field| "#{field.c_type} #{field.name}" }.join(", ") %>) {
    <%= node.c_type_name %> *instance = (<%= node.c_type_name %> *)calloc(1, sizeof(<%= node.c_type_name %>));

    // Disable GC for all these Ruby objects.
    <%- parameters.each do |parameter| -%>
    rb_gc_register_mark_object(<%= parameter.cached_ruby_value_expr %>);
    <%- end -%>

    <%- if node.builds_ruby_object_internally? -%>
    // Generate our own Ruby VALUE here, rather than accepting it from a parameter.
    VALUE ruby_value = <%= node.c_function_name %>(<%= parameters.map(&:name).join(", ") %>);
    <%- end -%>

    rb_gc_register_mark_object(ruby_value);

    *instance = (<%= node.c_type_name %>) {
        .base = (rbs_node_t) {
            .cached_ruby_value = ruby_value,
            .type = <%= node.c_type_enum_name %>
        },
        <%- node.fields.each do |field| -%>
        .<%= field.name %> = <%= field.cached_ruby_value_expr %>,
        <%- end -%>
    };

    return instance;
}

<%- end -%>

const char* get_class_name(VALUE o) {
    VALUE klass = rb_class_of(o);      // Get the class of the object
    VALUE klass_name = rb_class_name(klass);  // Get the name of the class
    const char* name = StringValueCStr(klass_name);  // Convert to C string
    return name;
}

VALUE rbs_struct_to_ruby_value(rbs_node_t *instance) {
    if (instance == NULL) {
        fprintf(stderr, "Tried to call rbs_struct_to_ruby_value(NULL)\n");
        exit(1);
    }

    VALUE ruby_value = instance->cached_ruby_value;

    if (ruby_value == Qnil || ruby_value == Qundef) {
        fprintf(stderr, "cached_ruby_value is NULL\n");
        exit(1);
    }

    const char *class_name = get_class_name(ruby_value);

    switch (instance->type) {
        <%- nodes.each do |node| -%>
        case <%= node.c_type_enum_name %>: {
            if (strcmp(class_name, "<%= node.ruby_full_name %>") != 0) {
                fprintf(stderr, "Expected class name: <%= node.ruby_full_name %>, got %s\n", class_name);
                exit(1);
            }
            break;
        }
        <%- end -%>
    }

    return instance->cached_ruby_value;
}
