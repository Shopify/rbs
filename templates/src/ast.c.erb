#include "rbs/ast.h"

#include <stdlib.h>
#include "rbs/ruby_objs.h"

rbs_node_list_t* rbs_node_list_new(rbs_allocator_t *allocator) {
    rbs_node_list_t *list = rbs_allocator_alloc(allocator, rbs_node_list_t);
    *list = (rbs_node_list_t) {
        .allocator = allocator,
        .head = NULL,
        .tail = NULL,
        .length = 0,
        .cached_ruby_value = rb_ary_new(),
    };

    rb_gc_register_mark_object(list->cached_ruby_value);

    return list;
}

void rbs_node_list_append(rbs_node_list_t *list, rbs_node_t *node) {
    rb_gc_register_mark_object(node->cached_ruby_value);

    rbs_node_list_node_t *new_node = rbs_allocator_alloc(list->allocator, rbs_node_list_node_t);
    *new_node = (rbs_node_list_node_t) {
        .node = node,
        .next = NULL,
    };

    if (list->tail == NULL) {
        list->head = new_node;
        list->tail = new_node;
    } else {
        list->tail->next = new_node;
        list->tail = new_node;
    }
    list->length++;

    rb_ary_push(list->cached_ruby_value, node->cached_ruby_value);
}

<%- nodes.each do |node| -%>
<%= node.c_type_name %> *<%= node.c_constructor_function_name %>(<%= node.constructor_params.map(&:parameter_decl).join(", ") %>) {
    <%= node.c_type_name %> *instance = rbs_allocator_alloc(allocator, <%= node.c_type_name %>);

    // Disable GC for all these Ruby objects.
    <%- node.fields.each do |parameter| -%>
    rb_gc_register_mark_object(<%= parameter.name %>);
    <%- end -%>

    <%- if node.builds_ruby_object_internally? -%>
    // Generate our own Ruby VALUE here, rather than accepting it from a parameter.
    VALUE ruby_value = <%= node.c_function_name %>(<%= node.fields.map(&:cached_ruby_value_expr).join(", ") %>);
    <%- end -%>

    rb_gc_register_mark_object(ruby_value);

    *instance = (<%= node.c_type_name %>) {
        .base = (rbs_node_t) {
            .cached_ruby_value = ruby_value,
            .type = <%= node.c_type_enum_name %>
        },
        <%- node.fields.each do |field| -%>
        .<%= field.name %> = <%= field.cached_ruby_value_expr %>,
        <%- end -%>
    };

    return instance;
}

<%- end -%>
