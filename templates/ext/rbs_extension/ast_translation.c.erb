#include "ast_translation.h"

#include "rbs/constants.h"
#include "rbs_string_bridging.h"

#include <stdlib.h>


VALUE rbs_node_list_to_ruby_array(rbs_node_list_t *list) {
    return list->cached_ruby_value;
}

VALUE rbs_hash_to_ruby_hash(rbs_hash_t *hash) {
    return hash->cached_ruby_value;
}

VALUE rbs_loc_to_ruby_location(rbs_location_t *loc) {
  return loc->cached_ruby_value;
}

#ifdef RB_PASS_KEYWORDS
  // Ruby 2.7 or later
  #define CLASS_NEW_INSTANCE(klass, argc, argv)\
          rb_class_new_instance_kw(argc, argv, klass, RB_PASS_KEYWORDS)
#else
  // Ruby 2.6
  #define CLASS_NEW_INSTANCE(receiver, argc, argv)\
          rb_class_new_instance(argc, argv, receiver)
#endif

const char* get_class_name(VALUE o) {
    VALUE klass = rb_class_of(o);      // Get the class of the object
    VALUE klass_name = rb_class_name(klass);  // Get the name of the class
    const char* name = StringValueCStr(klass_name);  // Convert to C string
    return name;
}

VALUE rbs_struct_to_ruby_value(rbs_node_t *instance) {
    if (instance == NULL) return Qnil;

    VALUE ruby_value = instance->cached_ruby_value;

    if (ruby_value == Qnil || ruby_value == Qundef) {
        fprintf(stderr, "cached_ruby_value is NULL\n");
        exit(1);
    }

    const char *class_name = get_class_name(ruby_value);

    switch (instance->type) {
        <%- nodes.each do |node| -%>
        case <%= node.c_type_enum_name %>: {
            <%-
            rbs_struct_to_ruby_value_shitlist = [
                "RBS::AST::Bool",
                "RBS::AST::Symbol",
                "RBS::Signature",
                "RBS::Types::Record::FieldType",
            ]

            if rbs_struct_to_ruby_value_shitlist.include?(node.ruby_full_name) -%>
            return instance->cached_ruby_value;
            <%- else -%>
            if (strcmp(class_name, "<%= node.ruby_full_name %>") != 0) {
                fprintf(stderr, "Expected class name: <%= node.ruby_full_name %>, got %s\n", class_name);
                exit(1);
            }
            <%- if node.fields.any? -%> <%# This prevents "warning: unused variable 'node'" %>
            <%= node.c_type_name %> *node = (<%= node.c_type_name %> *)instance;
            <%- end -%>
            // <%= node.fields.inspect %>
            VALUE h = rb_hash_new();
            <%- node.fields.each do |field| -%>
            <%- case field.c_type -%>
            <%- when "VALUE" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), node-><%= field.name %>);
            <%- when "rbs_node_list" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), rbs_node_list_to_ruby_array(node-><%= field.name %>));
            <%- when "rbs_hash" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), rbs_hash_to_ruby_hash(node-><%= field.name %>));
            <%- when "rbs_location" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), rbs_loc_to_ruby_location(node-><%= field.name %>));
            <%- when "rbs_ast_symbol" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), rbs_struct_to_ruby_value((rbs_node_t *) node-><%= field.name %>)); // rbs_ast_symbol
            <%- when "rbs_keyword" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), rbs_struct_to_ruby_value((rbs_node_t *) node-><%= field.name %>)); // rbs_keyword
            <%- when "rbs_string" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), rbs_string_to_ruby_string(&node-><%= field.name %>));
            <%- when "bool" -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), node-><%= field.name %> ? Qtrue : Qfalse);
            <%- else -%>
            <%- unless field.ast_node? -%>
            #warning unexpected type <%= field.c_type -%>
            <%- end -%>
            rb_hash_aset(h, ID2SYM(rb_intern("<%= field.name %>")), rbs_struct_to_ruby_value((rbs_node_t *) node-><%= field.name %>)); // <%= field.c_type %>
            <%- end -%>
            <%- end -%>

            return CLASS_NEW_INSTANCE(
                <%= node.c_constant_name %>,
                1,
                &h
            );
            <%- end -%>
        }
        <%- end -%>
        case RBS_KEYWORD:
        case RBS_AST_SYMBOL: {
            if (strcmp(class_name, "Symbol") != 0) {
                fprintf(stderr, "Expected class name: Symbol, got %s\n", class_name);
                exit(1);
            }

            return instance->cached_ruby_value;
        }
        case RBS_OTHER_RUBY_VALUE: {
            return instance->cached_ruby_value;
        }
    }
}
